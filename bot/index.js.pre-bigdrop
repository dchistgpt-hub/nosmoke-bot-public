// bot/index.js
require('dotenv').config();
// ===== quiet hours =====
let quietRange = (process.env.QUIET_DEFAULT || '23:00-07:00').trim();
// ¬´23:00-07:00¬ª ‚Üí { from: 23*60, to: 7*60 } (–º–∏–Ω—É—Ç—ã —Å –Ω–∞—á–∞–ª–∞ —Å—É—Ç–æ–∫)
function parseRange(str) {
  const [h1, h2] = str.split('-')
    .map(t => t.split(':').map(Number))
    .map(([h, m]) => h * 60 + (m || 0));
  return { from: h1, to: h2 };
}
function isQuietNow() {
  const now = new Date();
  const minutes = now.getHours() * 60 + now.getMinutes();
  const { from, to } = parseRange(quietRange);
  return from < to ? (minutes >= from && minutes < to)
                   : (minutes >= from || minutes < to); // –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
}
const { Telegraf } = require('telegraf');

const BOT_TOKEN = process.env.BOT_TOKEN;
const DOMAIN    = process.env.DOMAIN;           // https://bot.chatnzt.ru
const PORT      = process.env.PORT || 3000;     // —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç, —á—Ç–æ –≤ Caddyfile

const bot = new Telegraf(BOT_TOKEN);

// ===== middleware: –ª–æ–≥ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π =====
const fs = require('fs');
const path = require('path');
const LOG_FILE = path.join(__dirname, '../logs/messages.log');

bot.use(async (ctx, next) => {
  if (ctx.message && ctx.message.text) {                // —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const line = `[${new Date().toISOString()}] ` +
                 `${ctx.from.username || ctx.from.id}: ` +
                 `${ctx.message.text}\n`;
    fs.promises.appendFile(LOG_FILE, line).catch(console.error);
  }
  await next();                                         // –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–ª—å—à–µ
});

// ----- handlers ------------------------------------------------
bot.start(ctx => ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –Ω–∞ –≤–µ–±-—Ö—É–∫–µ.'));
bot.command('ping', ctx => ctx.reply('pong ‚úÖ'));
// /quiet            ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
// /quiet HH:MM-HH:MM ‚Äî –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π
bot.command('quiet', ctx => {
  const arg = ctx.message.text.replace('/quiet', '').trim();
  if (!arg) {
    return ctx.reply(`ü§´ –¢–∏—Ö–∏–µ —á–∞—Å—ã —Å–µ–π—á–∞—Å: ${quietRange}`);
  }
  // –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
  if (!/^\d{1,2}:\d{2}-\d{1,2}:\d{2}$/.test(arg)) {
    return ctx.reply('‚ùó –§–æ—Ä–º–∞—Ç: /quiet HH:MM-HH:MM  (–ø—Ä–∏–º–µ—Ä: /quiet 22:00-08:00)');
  }
  quietRange = arg;
  ctx.reply(`‚úÖ –¢–∏—Ö–∏–µ —á–∞—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${quietRange}`);
});
bot.command('help', ctx => {
  const helpText = `
–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
/start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/ping  ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´–∂–∏–≤–æ–π?¬ª
/help  ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
`;
  ctx.reply(helpText);
});
bot.command('echo', ctx => {
  // ctx.message.text –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: "/echo —á—Ç–æ-—Ç–æ"
  // —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ "/echo "
  const msg = ctx.message.text.slice(6).trim();
  if (msg.length === 0) {
    return ctx.reply('‚ùó –ö–∞–∫–æ–π —Ç–µ–∫—Å—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å? –ü–∏—à–∏ /echo –≤–∞—à_—Ç–µ–∫—Å—Ç');
  }
  ctx.reply(msg);
});
// /about ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ + —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
const aboutMsg = `
NoSmoke-bot ‚Äî Telegram-–±–æ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–∞—Ç–∞
–í–µ—Ä—Å–∏—è: 0.1

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ /ping  ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´–∂–∏–≤–æ–π?¬ª
‚Ä¢ /echo <—Ç–µ–∫—Å—Ç> ‚Äî –±–æ—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç
‚Ä¢ /quiet ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å ¬´—Ç–∏—Ö–∏–µ —á–∞—Å—ã¬ª
‚Ä¢ /about ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ò—Å—Ö–æ–¥–Ω–∏–∫–∏ –Ω–∞ GitHub:
https://github.com/dchistgpt-hub/nosmoke-bot
`;

bot.command('about', ctx => ctx.reply(aboutMsg));

bot.use(async (ctx, next) => {
  if (ctx.updateType === 'message' && isQuietNow()) {
    // –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
    return;
  }
  await next();
});
// ---------------------------------------------------------------

// –ø—É—Ç—å –≤–∏–¥–∞ /bot123:AA...
const WEBHOOK_PATH = `/bot${BOT_TOKEN}`;

(async () => {
  // —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±-—Ö—É–∫ —É Telegram
  await bot.telegram.setWebhook(`${DOMAIN}${WEBHOOK_PATH}`);
  // –∑–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  bot.startWebhook(WEBHOOK_PATH, null, PORT);
  console.log(`Webhook started on port ${PORT}`);
})();
