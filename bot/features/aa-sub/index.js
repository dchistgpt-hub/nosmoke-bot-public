"use strict";

const https = require("https");
const crypto = require("crypto");

const SHOP_ID = process.env.YK_SHOP_ID;
const SECRET_KEY = process.env.YK_SECRET_KEY;

function createYkPayment({ amount, description, metadata }) {
  return new Promise((resolve, reject) => {
    const body = JSON.stringify({
      amount: { value: amount, currency: "RUB" },
      capture: true,
      confirmation: { type: "redirect", return_url: "https://t.me/AI_Chatnzt_bot" },
      description,
      metadata
    });

    const req = https.request({
      hostname: "api.yookassa.ru",
      path: "/v3/payments",
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Idempotence-Key": crypto.randomUUID(),
        "Content-Length": Buffer.byteLength(body),
        "Authorization": "Basic " + Buffer.from(`${SHOP_ID}:${SECRET_KEY}`).toString("base64"),
        "User-Agent": "AI-Chatnzt-Bot/1.0"
      }
    }, res => {
      let data = "";
      res.on("data", d => (data += d));
      res.on("end", () => {
        if (res.statusCode >= 200 && res.statusCode < 300) {
          try {
            const obj = JSON.parse(data || "{}");
            const url = obj?.confirmation?.confirmation_url;
            return url ? resolve(url) : reject(new Error("YK: confirmation_url missing"));
          } catch {
            return reject(new Error("YK: bad JSON"));
          }
        }
        reject(new Error(`YK: status ${res.statusCode} ${data}`));
      });
    });
    req.on("error", reject);
    req.end(body);
  });
}

module.exports.enable = function enable(app, bot, db) {
  console.log('Feature "sub" enabled');

  const PAY_URL = "https://bot.chatnzt.ru/pay?kind=sub&days=30";

  const WELCOME_HTML = [
    "–ü—Ä–∏–≤–µ—Ç! üëã –ú—ã ‚Äî –ê–ª–µ–∫—Å–µ–π –∏ –î–º–∏—Ç—Ä–∏–π, —Å–æ–∑–¥–∞—Ç–µ–ª–∏ <b>AI Chatnzt ‚Äî –ù–∏–∫–æ—Ç–∏–Ω–æ–∑–∞–≤–∏—Å–∏–º–∞—è —Ç–µ—Ä–∞–ø–∏—è</b>.",
    "",
    "–ï—Å–ª–∏ —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Å–∏–≥–∞—Ä–µ—Ç. –ò –º—ã –∑–Ω–∞–µ–º, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã —ç—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–µ–≥–∫–æ, –±–µ–∑ —Å—Ä—ã–≤–æ–≤ –∏ –º—É–∫.",
    "",
    "–ù–∞—à AI ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´—É–º–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫¬ª. –≠—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –Ω–∞—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —Å–æ—Ç–Ω—è—Ö —Ç—ã—Å—è—á –Ω–∞—É—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏–∑–±–∞–≤–∏–ª–∏—Å—å –æ—Ç –∫—É—Ä–µ–Ω–∏—è. –ú—ã —Å–æ–±—Ä–∞–ª–∏ –æ–ø—ã—Ç –ª—É—á—à–∏—Ö –º–µ—Ç–æ–¥–∏–∫, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –∂–∏–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–±–µ–¥ –Ω–∞–¥ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é, —á—Ç–æ–±—ã —Ç–≤–æ–π –ø—É—Ç—å –±—ã–ª –ª–µ–≥—á–µ –∏ –∫–æ—Ä–æ—á–µ.",
    "",
    "–û–Ω–∞ –∏–∑—É—á–∞–µ—Ç —Ç–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ —É—è–∑–≤–∏–º –ø–µ—Ä–µ–¥ —Å–∏–≥–∞—Ä–µ—Ç–æ–π, –∏ –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–∏ –º–∏–Ω—É—Ç—ã –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ä–≤–∞—Ç—å—Å—è.",
    "",
    "üî• –¢—ã –±–æ–ª—å—à–µ –Ω–µ –æ–¥–∏–Ω –Ω–∞ —ç—Ç–æ–π –≤–æ–π–Ω–µ. –ú—ã –±—É–¥–µ–º —Ä—è–¥–æ–º 24/7 ‚Äî –≤ —Ç–≤–æ—ë–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ, –≤ –∫–∞–∂–¥–æ–º –º–æ–º–µ–Ω—Ç–µ, –∫–æ–≥–¥–∞ —Ä—É–∫–∞ —Ç—è–Ω–µ—Ç—Å—è –∑–∞ –ø–∞—á–∫–æ–π.",
    "",
    "üí≥ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞:</b> 790 —Ä—É–±.",
    "‚è≥ <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> 30 –¥–Ω–µ–π.",
    "",
    "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî –∂–º–∏ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
    "",
    '–ü—Ä–æ–¥–æ–ª–∂–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href="https://disk.yandex.ru/i/yQ2FfOtBdy_NTw">—É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ñ–µ—Ä—Ç—ã</a>.',
    "",
    "–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã: /ping, /echo, /quiet, /stats, /health, /uptime, /version, /about"
  ].join("\n");

  async function upsertUser(tgId) {
    try {
      if (!db) return;
      const tg_id = String(tgId);
      await db.collection("users").updateOne(
        { tg_id },
        { $setOnInsert: { tg_id, createdAt: new Date() }, $set: { updatedAt: new Date() } },
        { upsert: true }
      );
    } catch (e) {
      console.error("start: upsert user failed:", e?.message || e);
    }
  }

  async function sendWelcome(chatId, tgId) {
    await upsertUser(tgId);
    const opts = {
      parse_mode: "HTML",
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[{ text: "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π", url: PAY_URL }]]
      }
    };
    if (bot?.sendMessage) return bot.sendMessage(chatId, WELCOME_HTML, opts); // node-telegram-bot-api
    if (bot?.telegram?.sendMessage) return bot.telegram.sendMessage(chatId, WELCOME_HTML, opts); // telegraf
  }

  // /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–æ–±–∞ —Å—Ç–µ–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
  if (bot?.onText) bot.onText(/^\/start\b/i, (msg) => sendWelcome(msg.chat.id, msg.from?.id));
  if (bot?.command) bot.command("start", (ctx) => sendWelcome(ctx.chat.id, ctx.from?.id));

  // /pay ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ YooKassa (sub 30 –¥–Ω–µ–π)
  if (app?.get) {
    app.get("/pay", async (req, res, next) => {
      try {
        if ((req.query.kind || "") !== "sub") return next();
        if (!SHOP_ID || !SECRET_KEY) return res.status(500).send("payments: YK creds missing");

        const days = Number(req.query.days) || 30;
        const tgId = req.query.tg_id || req.query.tg || null;

        const confirmationUrl = await createYkPayment({
          amount: "790.00",
          description: "AI Chatnzt: –ü–æ–¥–ø–∏—Å–∫–∞ 30 –¥–Ω–µ–π",
          metadata: { tg_id: tgId, kind: "sub", days }
        });

        return res.redirect(302, confirmationUrl);
      } catch (e) {
        console.error("sub: /pay error", e?.message || e);
        return res.status(500).send("create payment error");
      }
    });
  }
};
